{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\portfolio-cms\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [isDark, setIsDark] = useState(false);\n\n  // Check if user has a stored theme preference\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme');\n    if (storedTheme) {\n      setIsDark(storedTheme === 'dark');\n    } else {\n      // Default to light theme\n      setIsDark(false);\n    }\n  }, []);\n\n  // Toggle theme and save preference in localStorage\n  const toggleTheme = () => {\n    setIsDark(prevTheme => {\n      const newTheme = !prevTheme;\n      localStorage.setItem('theme', newTheme ? 'dark' : 'light');\n      return newTheme;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDark,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"q9ovQTvwIdpxeVii6kJLTuTYpwE=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDark","setIsDark","storedTheme","localStorage","getItem","toggleTheme","prevTheme","newTheme","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/portfolio-cms/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(false);\r\n\r\n  // Check if user has a stored theme preference\r\n  useEffect(() => {\r\n    const storedTheme = localStorage.getItem('theme');\r\n    if (storedTheme) {\r\n      setIsDark(storedTheme === 'dark');\r\n    } else {\r\n      // Default to light theme\r\n      setIsDark(false);\r\n    }\r\n  }, []);\r\n\r\n  // Toggle theme and save preference in localStorage\r\n  const toggleTheme = () => {\r\n    setIsDark((prevTheme) => {\r\n      const newTheme = !prevTheme;\r\n      localStorage.setItem('theme', newTheme ? 'dark' : 'light');\r\n      return newTheme;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,WAAW,EAAE;MACfD,SAAS,CAACC,WAAW,KAAK,MAAM,CAAC;IACnC,CAAC,MAAM;MACL;MACAD,SAAS,CAAC,KAAK,CAAC;IAClB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBJ,SAAS,CAAEK,SAAS,IAAK;MACvB,MAAMC,QAAQ,GAAG,CAACD,SAAS;MAC3BH,YAAY,CAACK,OAAO,CAAC,OAAO,EAAED,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;MAC1D,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEZ,OAAA,CAACC,YAAY,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEV,MAAM;MAAEK;IAAY,CAAE;IAAAP,QAAA,EACnDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACf,EAAA,CA5BWF,aAAa;AAAAkB,EAAA,GAAblB,aAAa;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}