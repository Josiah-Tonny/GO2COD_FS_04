{"version":3,"file":"static/js/902.5a1125c5.chunk.js","mappings":"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","sources":["components/portfolio/PortfolioList.js","services/portfolioService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { portfolioService } from '../../services/portfolioService';\r\n\r\nconst PortfolioList = () => {\r\n  const [portfolio, setPortfolio] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchPortfolio = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      console.log('Starting portfolio fetch...');\r\n      const data = await portfolioService.getPortfolio();\r\n      console.log('Portfolio data received:', data);\r\n      setPortfolio(data);\r\n    } catch (err) {\r\n      console.error('Portfolio fetch failed:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPortfolio();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"text-center py-12\">\r\n        <h2 className=\"text-2xl font-bold text-red-600\">Error</h2>\r\n        <p className=\"mt-2 text-gray-600\">{error}</p>\r\n        <button \r\n          onClick={fetchPortfolio}\r\n          className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n        >\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h2 className=\"text-3xl font-bold mb-8\">Portfolio</h2>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {portfolio.length > 0 ? (\r\n          portfolio.map((item) => (\r\n            <div key={item._id} className=\"bg-white rounded-lg shadow-md p-6\">\r\n              <h3 className=\"text-xl font-semibold\">{item.title}</h3>\r\n              <p className=\"text-gray-600 mt-2\">{item.description}</p>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"col-span-full text-center text-gray-600\">\r\n            No portfolio items found\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PortfolioList;","// src/services/portfolioService.js\r\nimport api from '../utils/api';\r\n\r\nconst handleApiError = (error, defaultMessage) => {\r\n  console.error('API Error:', {\r\n    message: error.message,\r\n    response: error.response?.data,\r\n    status: error.response?.status,\r\n    endpoint: error.config?.url\r\n  });\r\n\r\n  if (error.message === 'Network Error') {\r\n    throw new Error('Unable to connect to the server. Please check your connection.');\r\n  }\r\n\r\n  throw new Error(\r\n    error.response?.data?.message || \r\n    error.message || \r\n    defaultMessage\r\n  );\r\n};\r\n\r\nexport const portfolioService = {\r\n  getPortfolio: async () => {\r\n    try {\r\n      console.log('Fetching portfolio from:', `${process.env.REACT_APP_API_URL}/portfolio`);\r\n      const response = await api.get('/portfolio');\r\n      console.log('Portfolio data received:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      handleApiError(error, 'Failed to fetch portfolio items');\r\n    }\r\n  },\r\n\r\n  createPortfolioItem: async (data) => {\r\n    try {\r\n      console.log('Creating portfolio item:', data);\r\n      const response = await api.post('/portfolio', data);\r\n      console.log('Portfolio item created:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      handleApiError(error, 'Failed to create portfolio item');\r\n    }\r\n  },\r\n\r\n  updatePortfolioItem: async (id, data) => {\r\n    try {\r\n      console.log('Updating portfolio item:', { id, data });\r\n      const response = await api.put(`/portfolio/${id}`, data);\r\n      console.log('Portfolio item updated:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      handleApiError(error, `Failed to update portfolio item ${id}`);\r\n    }\r\n  },\r\n\r\n  deletePortfolioItem: async (id) => {\r\n    try {\r\n      console.log('Deleting portfolio item:', id);\r\n      const response = await api.delete(`/portfolio/${id}`);\r\n      console.log('Portfolio item deleted:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      handleApiError(error, `Failed to delete portfolio item ${id}`);\r\n    }\r\n  },\r\n\r\n  // Helper method to validate portfolio item data\r\n  validatePortfolioItem: (data) => {\r\n    const errors = [];\r\n    \r\n    if (!data.title) {\r\n      errors.push('Title is required');\r\n    }\r\n    \r\n    if (!data.description) {\r\n      errors.push('Description is required');\r\n    }\r\n    \r\n    if (errors.length > 0) {\r\n      throw new Error(errors.join(', '));\r\n    }\r\n    \r\n    return true;\r\n  }\r\n};\r\n\r\n// Add type checking if using TypeScript\r\nexport const PortfolioItemType = {\r\n  _id: String,\r\n  title: String,\r\n  description: String,\r\n  image: String,\r\n  link: String,\r\n  technologies: Array,\r\n  createdAt: Date,\r\n  updatedAt: Date\r\n};"],"names":["PortfolioList","portfolio","setPortfolio","useState","loading","setLoading","error","setError","fetchPortfolio","async","console","log","data","portfolioService","getPortfolio","err","message","useEffect","_jsx","className","children","_jsxs","onClick","length","map","item","title","description","_id","handleApiError","defaultMessage","_error$response","_error$response2","_error$config","_error$response3","_error$response3$data","response","status","endpoint","config","url","Error","api","get","createPortfolioItem","post","updatePortfolioItem","id","put","deletePortfolioItem","delete","validatePortfolioItem","errors","push","join","Date"],"sourceRoot":""}